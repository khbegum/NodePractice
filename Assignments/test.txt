For detailed information, see the documentation of the asynchronous version of this API: fs.readFile().

If the encoding option is specified then this function returns a string. Otherwise it returns a buffer.

Similar to fs.readFile(), when the path is a directory, the behavior of fs.readFileSync() is platform-specific.

// macOS, Linux, and Windows
fs.readFileSync('<directory>');
// => [Error: EISDIR: illegal operation on a directory, read <directory>]

//  FreeBSD
fs.readFileSync('<directory>'); // => <data>
fs.readlink(path[, options], callback)[src]#
History
path <string> | <Buffer> | <URL>
options <string> | <Object>

encoding <string> Default: 'utf8'
callback <Function>

err <Error>
linkString <string> | <Buffer>
Asynchronous readlink(2). The callback gets two arguments (err, linkString).

The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path passed to the callback. If the encoding is set to 'buffer', the link path returned will be passed as a Buffer object.

fs.readlinkSync(path[, options])[src]#
History
path <string> | <Buffer> | <URL>
options <string> | <Object>

encoding <string> Default: 'utf8'
Returns: <string> | <Buffer>
Synchronous readlink(2). Returns the symbolic link's string value.

The optional options argument can be a string specifying an encoding, or an object with an encoding property specifying the character encoding to use for the link path returned. If the encoding is set to 'buffer', the link path returned will be passed as a Buffer object.

fs.readSync(fd, buffer, offset, length, position)[src]#
History
fd <integer>
buffer <Buffer> | <TypedArray> | <DataView>
offset <integer>
length <integer>
position <integer>
Returns: <number>
Returns the number of bytesRead.

For detailed information, see the documentation of the asynchronous version of this API: fs.read().